<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: a9edd62d087ab1eb6292c795b7256e14ff9f1234 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->
 <sect1 xml:id="language.oop5.static" xmlns="http://docbook.org/ns/docbook">
  <title>Statique</title>

  <tip>
   <simpara>
    Cette page décrit l'utilisation du mot clé <literal>static</literal>
    qui permet de définir des méthodes et des propriétés statiques.
    <literal>static</literal> peut aussi être utilisé pour
    <link linkend="language.variables.scope.static">définir des variables statiques</link>
    et pour
    <link linkend="language.oop5.late-static-bindings">finir des liaisons statiques</link>.
    Reportez-vous à ces pages pour plus d'informations sur la signification de
    <literal>static</literal>.
   </simpara>
  </tip>
  
  <para>
   Le fait de déclarer des propriétés ou des méthodes comme statiques vous
   permet d'y accéder sans avoir besoin d'instancier la classe. On ne peut
   accéder à une propriété déclarée comme statique avec l'objet instancié d'une
   classe (bien que ce soit possible pour une méthode statique).
  </para>

  <sect2 xml:id="language.oop5.static.methods">
   <title>Méthodes statiques</title>

   <para>
    Comme les méthodes statiques peuvent être appelées sans qu'une instance
    d'objet n'ait été créée, la pseudo-variable <varname>$this</varname> n'est pas
    disponible dans les méthodes déclarées comme statiques.
   </para>

   <warning>
    <para>
     Appeler une méthode non-statique statiquement lancera une <classname>Error</classname>.
    </para>
    <para>
     Antérieur à PHP 8.0.0, appeler une méthode non-statique statiquement est obsolète,
     et lèvera un avertissement <constant>E_DEPRECATED</constant>.
    </para>
   </warning>

   <example>
   <title>Exemple avec une méthode statique</title>
    <programlisting role="php">
<![CDATA[
<?php
class Foo
{
    public static function aStaticMethod() {
        // ...
    }
}

Foo::aStaticMethod();
$classname = 'Foo';
$classname::aStaticMethod();
?>
]]>
    </programlisting>
  </example> 
  </sect2>
  
  <sect2 xml:id="language.oop5.static.properties">
   <title>Propriétés statiques</title>
   <para>
    On ne peut pas accéder à des propriétés statiques à travers l'objet en
    utilisant l'opérateur <literal>-&gt;</literal>.
   </para>

   <para>
    Comme toute autre variable statique PHP, les propriétés statiques peuvent
    être initialisées avec les mêmes règles que les expressions &const; :
    certaines expressions limitées sont possibles, à condition qu'elles
    puissent être évaluées lors de la compilation.
   </para>

  <para>
   Il est possible de référencer la classe en utilisant une variable.
   La valeur de la variable ne peut être un mot-clé (par exemple <literal>self</literal>,
   <literal>parent</literal> et <literal>static</literal>).
  </para>

  <example>
   <title>Exemple avec une propriété statique</title>
   <programlisting role="php">
<![CDATA[
<?php
class Foo
{
    public static $my_static = 'foo';

    public function staticValue() {
        return self::$my_static;
    }
}

class Bar extends Foo
{
    public function fooStatic() {
        return parent::$my_static;
    }
}


print Foo::$my_static . "\n";

$foo = new Foo();
print $foo->staticValue() . "\n";
print $foo->my_static . "\n";      // "Propriété" my_static non définie

print $foo::$my_static . "\n";
$classname = 'Foo';
print $classname::$my_static . "\n";

print Bar::$my_static . "\n";
$bar = new Bar();
print $bar->fooStatic() . "\n";
?>
]]>
   </programlisting>
  </example>
  </sect2>
  
 </sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
